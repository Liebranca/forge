#!/usr/bin/perl
# ---   *   ---   *   ---
# ANVIL
# For striking metal
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,

# ---   *   ---   *   ---
# deps

package anvil;

  use v5.36.0;
  use strict;
  use warnings;

  use Readonly;
  use English qw(-no_match_words);

  use lib $ENV{ARPATH}.'/lib/sys/';

  use Style;
  use Tree;
  use Arstd::IO;

  use lib $ENV{ARPATH}.'/forge/';

  use A9M::SHARE::is;

  use anvil::l0;
  use anvil::l1;

# ---   *   ---   *   ---
# info

  our $VERSION = v0.00.2;#b
  our $AUTHOR  = 'IBN-3DILA';

# ---   *   ---   *   ---
# ROM

  Readonly our $PATH=>{

     basic
  => "$ENV{ARPATH}/forge/A9M/ROM/isbasic.bin",

  };

# ---   *   ---   *   ---
# cstruc

sub new($class,%O) {

  my $l1        = $NULLSTR;

  my $l2_frame  = Tree->new_frame();
  my $l2        = $l2_frame->nit(undef,'$');


  my $self=bless {

    l0 => $NULLSTR,
    l1 => $NULLSTR,
    l2 => $l2,

    anchor => undef,
    nest   => [],

    status => 0x00,

  },$class;

  return $self;

};

# ---   *   ---   *   ---
# procs a codestr from file or raw

sub read($self,$src,$is='basic') {

  my $ROM     = undef;#load_ROM($PATH->{$is});
  my $codestr = (

   ! ($src=~ $NEWLINE_RE)

  && length $src < 128
  && -f $src

  ) ? orc($src)
    : $src
    ;


  anvil::l0::read($self,$codestr);

  $self->{l2}->prich();

};

# ---   *   ---   *   ---
# get binary generated by
# A9M::ismaker

sub load_ROM($fpath) {

  my $bytes=orc($fpath);
  my ($tab,$len)=
    $OPCODE_TAB->from_bytes(\$bytes);

  return $tab;

};

# ---   *   ---   *   ---
# test

my $ice=anvil->new();
$ice->read(q[

mov ar,wide [br+$10];

]);

# ---   *   ---   *   ---
